#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Little Big Data
#+AUTHOR: Stephen Brown

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/9-CS-bigData">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Re-introduction to Python
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:
- Click [[http://amomwithalessonplan.com/knock-knock-jokes-for-kids/][here]] and choose a "joke". Open IDLE and get the computer to output your joke.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Now  add your joke.

- Stuck? 
- print ("message here")
[[./img/PythonJoke1.png]]

* Perfunctory Steps
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- [[http://dictionary.reference.com/browse/perfunctory][Perfunctory]](click link for definition)
- Let's wrap our joke in a function so we can use it again and again.
- A function is a piece of code that we may want to use again and again.
- This makes for less code and more efficient testing.

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Add the below code:

def joke1():
	your print statements here

joke1() # this will call the joke

- Stuck?
[[./img/PythonJoke2.png]]
- Add two more 'jokes' to your program as functions *joke2* and *joke3*

* Choices
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Currently our joke is static, we need to get active and responsive. 
- We use variables to store data, so let's ask a question.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Add the code below to add a variable so we can response to the answer.
[[./img/PythonJoke3.png]]
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Now we have an answer; we can respond. The keywords for choice are if / elif / else. There should always be one if and one else. If you need more decisions just add more elif inbetween the if and else. This allows us to make branching programs that are able to interactive with the user. For if and elif statements we need to compare.
- We can use several symbols to compare answers in different ways - choice making choices?

- < Less than 
- > More than
- == same as
- != or <> not the same as

- For the else statement we do not need a comparator as it is just everything else.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Add the code below so we can response to the answer.
[[./img/PythonJoke4.png]]
- Expand it!: Now get your code to call all three functions  based on your response to the first question.
- Stuck? It should look like this.
[[./img/PythonJoke5.png]]

* Let's go round again
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
- We want our user to be able to choose several times to 'enjoy' all of our witty jokes.
- Action Point: Add the following code.
[[./img/PythonJoke6.png]]
- Debug Time!
- What's wrong with the code? (6 to find)
[[./img/PythonJoke7.png]]
* Comedy is all about timing
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END: 
- Add this to your first line import time, datetime.
- This will bring a whole series of commands involving time and date.
- Now add the extra code:
[[./img/PythonJoke8.png]]
- Yeah... much funnier...
* Accessing more comedy
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END: 
- A text file has been added with some of the best jokes...
- I want to import them into Python and then choose a random joke each time.
- Start a new file - CTRL + N.
- Save as 'accessing the comedy.py'
- Open and save the following text file.
- [[./img/jokes.txt][Click here to open the jokes text file.]]
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Use the code below to get python to open and read the file.
[[./img/PythonJoke9.jpg]]
- Now let's add a search facility.
[[./img/PythonJoke10.jpg]]
** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Upload a screenshot/screen clip of your code with 3 jokes in functions,input variable and conditionals.
** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Add screenshots of debugging and use of libraries in our code. 
** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Add a screenshot showing you using the code provided to access and use a text file using Python's ability to read and search.
